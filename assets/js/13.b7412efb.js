(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{206:function(e,a,t){"use strict";t.r(a);var r=t(0),n=Object(r.a)({},function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"terraform-help"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#terraform-help","aria-hidden":"true"}},[e._v("#")]),e._v(" terraform help")]),e._v(" "),t("p",[e._v("直接執行 terraform 預設就可以看到使用方法。")]),e._v(" "),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ terraform\nUsage: terraform [--version] [--help] <command> [args]\n\nThe available commands for execution are listed below.\nThe most common, useful commands are shown first, followed by\nless common or more advanced commands. If you're just getting\nstarted with Terraform, stick with the common commands. For the\nother commands, please read the help and docs before usage.\n\nCommon commands:\n    apply              Builds or changes infrastructure\n    console            Interactive console for Terraform interpolations\n    destroy            Destroy Terraform-managed infrastructure\n    fmt                Rewrites config files to canonical format\n    get                Download and install modules for the configuration\n    graph              Create a visual graph of Terraform resources\n    import             Import existing infrastructure into Terraform\n    init               Initialize a new or existing Terraform configuration\n    output             Read an output from a state file\n    plan               Generate and show an execution plan\n    providers          Prints a tree of the providers used in the configuration\n    push               Upload this Terraform module to Terraform Enterprise to run\n    refresh            Update local state file against real resources\n    show               Inspect Terraform state or plan\n    taint              Manually mark a resource for recreation\n    untaint            Manually unmark a resource as tainted\n    validate           Validates the Terraform files\n    version            Prints the Terraform version\n    workspace          Workspace management\n\nAll other commands:\n    debug              Debug output management (experimental)\n    force-unlock       Manually unlock the terraform state\n    state              Advanced state management\n")])])]),t("p",[e._v("terraform 對每一個 sub-command 都有 help 資訊")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ terraform graph -h\nUsage: terraform graph "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("options"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("DIR"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n\n  Outputs the visual execution graph of Terraform resources according to\n  configuration files "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" DIR "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("or the current directory "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" omitted"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(".\n\n  The graph is outputted "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" DOT format. The typical program that can\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("read")]),e._v(" this "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("format")]),e._v(" is GraphViz, but many web services are also available\n  to "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("read")]),e._v(" this format.\n\n  The -type flag can be used to control the "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("type")]),e._v(" of graph shown. Terraform\n  creates different graphs "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" different operations. See the options below\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" the list of types supported. The default "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("type")]),e._v(" is "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"plan"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" a\n  configuration is given, and "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"apply"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" a plan "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" is passed as an\n  argument.\n\nOptions:\n\n  -draw-cycles   Highlight any cycles "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" the graph with colored edges.\n                 This helps when diagnosing cycle errors.\n\n  -no-color      If specified, output won't contain any color.\n\n  -type"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("plan     Type of graph to output. Can be: plan, plan-destroy, apply,\n                 validate, input, refresh.\n")])])])])},[],!1,null,null,null);a.default=n.exports}}]);